{"version":3,"sources":["../src/index.ts","../src/weather-plugin.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { MCPServer } from '@mcp/server-core';\nimport { WeatherPlugin } from './weather-plugin';\n\nasync function main() {\n  // Get API key from environment or command line\n  const apiKey = process.env.OPENWEATHER_API_KEY || process.argv[2];\n  \n  if (!apiKey) {\n    console.error('‚ö†Ô∏è  No OpenWeatherMap API key provided. Using demo mode.');\n    console.error('To get real weather data:');\n    console.error('1. Get a free API key from https://openweathermap.org/api');\n    console.error('2. Set OPENWEATHER_API_KEY environment variable');\n    console.error('3. Or pass the API key as a command line argument');\n    console.error('');\n    console.error('Starting in demo mode...');\n    console.error('');\n  }\n\n  // Create server with stdio transport (for CLI usage)\n  const server = new MCPServer({\n    name: 'weather-server',\n    version: '1.0.0',\n    transport: { type: 'stdio' }\n  });\n  \n  // Add weather plugin\n  const weatherPlugin = new WeatherPlugin(apiKey);\n  await server.registerPlugin(weatherPlugin);\n  \n  // Start server\n  try {\n    await server.start();\n    console.error('üå§Ô∏è  Weather MCP Server started successfully!');\n    console.error('Available tools:');\n    console.error('  - get_current_weather: Get current weather for a location');\n    console.error('  - get_weather_forecast: Get 5-day forecast for a location');\n    console.error('  - search_locations: Search for locations by name');\n    console.error('');\n    \n    if (!apiKey || apiKey === 'demo_key') {\n      console.error('üîß Running in demo mode - set OPENWEATHER_API_KEY for real data');\n    } else {\n      console.error('üîë Using OpenWeatherMap API key for real weather data');\n    }\n    console.error('');\n  } catch (error) {\n    console.error('‚ùå Failed to start weather server:', error);\n    process.exit(1);\n  }\n}\n\n// Handle graceful shutdown\nprocess.on('SIGINT', () => {\n  console.error('\\nüëã Weather server shutting down...');\n  process.exit(0);\n});\n\nprocess.on('SIGTERM', () => {\n  console.error('\\nüëã Weather server shutting down...');\n  process.exit(0);\n});\n\n// Start the server\nmain().catch((error) => {\n  console.error('‚ùå Weather server error:', error);\n  process.exit(1);\n});","import { BasePlugin } from '@mcp/plugin-base';\nimport { PluginMetadata, MCPToolDefinition, MCPResourceDefinition, PluginContext } from '@mcp/types';\n\ninterface WeatherData {\n  location: string;\n  temperature: number;\n  condition: string;\n  humidity: number;\n  windSpeed: number;\n  forecast: Array<{\n    date: string;\n    high: number;\n    low: number;\n    condition: string;\n  }>;\n}\n\ninterface GeoLocation {\n  lat: number;\n  lon: number;\n  name: string;\n  country: string;\n}\n\nexport class WeatherPlugin extends BasePlugin {\n  metadata: PluginMetadata = {\n    id: 'weather-api',\n    name: 'Weather Plugin',\n    version: '1.0.0',\n    description: 'Provides weather information and forecasts using OpenWeatherMap API'\n  };\n  \n  private apiKey: string;\n  private baseUrl = 'https://api.openweathermap.org/data/2.5';\n  private geoUrl = 'https://api.openweathermap.org/geo/1.0';\n\n  constructor(apiKey?: string) {\n    super();\n    this.apiKey = apiKey || process.env.OPENWEATHER_API_KEY || 'demo_key';\n  }\n\n  protected async onInitialize(): Promise<void> {\n    if (this.apiKey === 'demo_key') {\n      console.error('Using demo API key - replace with real OpenWeatherMap API key for production');\n    }\n  }\n\n  protected defineTools(): MCPToolDefinition[] {\n    return [\n      this.createTool(\n        'get_current_weather',\n        'Get current weather conditions for a specific location',\n        {\n          location: {\n            type: 'string',\n            description: 'City name, state/country (e.g., \"San Francisco, CA\" or \"London, UK\")'\n          },\n          units: {\n            type: 'string',\n            enum: ['metric', 'imperial', 'kelvin'],\n            description: 'Temperature units (metric=Celsius, imperial=Fahrenheit, kelvin=Kelvin)',\n            default: 'metric'\n          }\n        },\n        ['location'],\n        this.getCurrentWeather.bind(this)\n      ),\n      \n      this.createTool(\n        'get_weather_forecast',\n        'Get 5-day weather forecast for a specific location',\n        {\n          location: {\n            type: 'string',\n            description: 'City name, state/country (e.g., \"San Francisco, CA\" or \"London, UK\")'\n          },\n          units: {\n            type: 'string',\n            enum: ['metric', 'imperial', 'kelvin'],\n            description: 'Temperature units (metric=Celsius, imperial=Fahrenheit, kelvin=Kelvin)',\n            default: 'metric'\n          }\n        },\n        ['location'],\n        this.getWeatherForecast.bind(this)\n      ),\n\n      this.createTool(\n        'search_locations',\n        'Search for locations by name to get coordinates and full location details',\n        {\n          query: {\n            type: 'string',\n            description: 'Location search query (city name, partial name, etc.)'\n          },\n          limit: {\n            type: 'number',\n            description: 'Maximum number of results to return',\n            default: 5,\n            minimum: 1,\n            maximum: 10\n          }\n        },\n        ['query'],\n        this.searchLocations.bind(this)\n      )\n    ];\n  }\n\n  protected defineResources(): MCPResourceDefinition[] {\n    return [\n      this.createResource(\n        'weather://current',\n        'Current Weather Template',\n        'Template for requesting current weather data',\n        async () => ({ template: 'current weather' }),\n        'application/json'\n      ),\n      this.createResource(\n        'weather://forecast',\n        'Weather Forecast Template', \n        'Template for requesting weather forecast data',\n        async () => ({ template: 'weather forecast' }),\n        'application/json'\n      )\n    ];\n  }\n\n  private async getCurrentWeather(params: any, context: PluginContext): Promise<any> {\n    const { location, units = 'metric' } = params;\n\n    if (this.apiKey === 'demo_key') {\n      return {\n        content: [{\n          type: 'text',\n          text: this.getDemoWeatherData(location, 'current')\n        }]\n      };\n    }\n\n    const geoData = await this.geocodeLocation(location);\n    if (!geoData.length) {\n      throw new Error(`Location \"${location}\" not found`);\n    }\n\n    const { lat, lon, name, country } = geoData[0];\n    const response = await fetch(\n      `${this.baseUrl}/weather?lat=${lat}&lon=${lon}&units=${units}&appid=${this.apiKey}`\n    );\n\n    if (!response.ok) {\n      throw new Error(`Weather API error: ${response.status} ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    const weather: WeatherData = {\n      location: `${name}, ${country}`,\n      temperature: Math.round(data.main.temp),\n      condition: data.weather[0].description,\n      humidity: data.main.humidity,\n      windSpeed: data.wind.speed,\n      forecast: []\n    };\n\n    const unitsSymbol = units === 'imperial' ? '¬∞F' : units === 'kelvin' ? 'K' : '¬∞C';\n    const windUnit = units === 'imperial' ? 'mph' : 'm/s';\n\n    return {\n      content: [{\n        type: 'text',\n        text: `**Current Weather for ${weather.location}**\\n\\n` +\n              `üå°Ô∏è Temperature: ${weather.temperature}${unitsSymbol}\\n` +\n              `‚òÅÔ∏è Condition: ${weather.condition}\\n` +\n              `üíß Humidity: ${weather.humidity}%\\n` +\n              `üí® Wind Speed: ${weather.windSpeed} ${windUnit}`\n      }]\n    };\n  }\n\n  private async getWeatherForecast(params: any, context: PluginContext): Promise<any> {\n    const { location, units = 'metric' } = params;\n\n    if (this.apiKey === 'demo_key') {\n      return {\n        content: [{\n          type: 'text',\n          text: this.getDemoWeatherData(location, 'forecast')\n        }]\n      };\n    }\n\n    const geoData = await this.geocodeLocation(location);\n    if (!geoData.length) {\n      throw new Error(`Location \"${location}\" not found`);\n    }\n\n    const { lat, lon, name, country } = geoData[0];\n    const response = await fetch(\n      `${this.baseUrl}/forecast?lat=${lat}&lon=${lon}&units=${units}&appid=${this.apiKey}`\n    );\n\n    if (!response.ok) {\n      throw new Error(`Weather API error: ${response.status} ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    const unitsSymbol = units === 'imperial' ? '¬∞F' : units === 'kelvin' ? 'K' : '¬∞C';\n    \n    // Group forecasts by date\n    const dailyForecasts = new Map<string, any[]>();\n    data.list.forEach((item: any) => {\n      const date = new Date(item.dt * 1000).toISOString().split('T')[0];\n      if (!dailyForecasts.has(date)) {\n        dailyForecasts.set(date, []);\n      }\n      dailyForecasts.get(date)!.push(item);\n    });\n\n    let forecastText = `**5-Day Weather Forecast for ${name}, ${country}**\\n\\n`;\n    \n    Array.from(dailyForecasts.entries()).slice(0, 5).forEach(([date, forecasts]) => {\n      const temps = forecasts.map(f => f.main.temp);\n      const conditions = forecasts.map(f => f.weather[0].description);\n      const high = Math.round(Math.max(...temps));\n      const low = Math.round(Math.min(...temps));\n      const condition = conditions[Math.floor(conditions.length / 2)]; // Middle forecast of the day\n      \n      const dateObj = new Date(date);\n      const dayName = dateObj.toLocaleDateString('en-US', { weekday: 'long' });\n      const monthDay = dateObj.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n      \n      forecastText += `**${dayName}, ${monthDay}**\\n`;\n      forecastText += `  High: ${high}${unitsSymbol} | Low: ${low}${unitsSymbol}\\n`;\n      forecastText += `  Condition: ${condition}\\n\\n`;\n    });\n\n    return {\n      content: [{\n        type: 'text',\n        text: forecastText\n      }]\n    };\n  }\n\n  private async searchLocations(params: any, context: PluginContext): Promise<any> {\n    const { query, limit = 5 } = params;\n\n    if (this.apiKey === 'demo_key') {\n      return {\n        content: [{\n          type: 'text',\n          text: `**Demo Location Search Results for \"${query}\"**\\n\\n` +\n                `üåç San Francisco, CA, US (37.7749, -122.4194)\\n` +\n                `üåç London, UK (51.5074, -0.1278)\\n` +\n                `üåç Tokyo, JP (35.6762, 139.6503)\\n` +\n                `üåç Paris, FR (48.8566, 2.3522)\\n` +\n                `üåç New York, NY, US (40.7128, -74.0060)\\n\\n` +\n                `*Note: Using demo data. Set OPENWEATHER_API_KEY for real results.*`\n        }]\n      };\n    }\n\n    const geoData = await this.geocodeLocation(query, limit);\n    \n    if (!geoData.length) {\n      return {\n        content: [{\n          type: 'text',\n          text: `No locations found for \"${query}\"`\n        }]\n      };\n    }\n\n    let resultsText = `**Location Search Results for \"${query}\"**\\n\\n`;\n    geoData.forEach((location: GeoLocation) => {\n      resultsText += `üåç ${location.name}, ${location.country} (${location.lat.toFixed(4)}, ${location.lon.toFixed(4)})\\n`;\n    });\n\n    return {\n      content: [{\n        type: 'text',\n        text: resultsText\n      }]\n    };\n  }\n\n  private async geocodeLocation(location: string, limit: number = 1): Promise<GeoLocation[]> {\n    const response = await fetch(\n      `${this.geoUrl}/direct?q=${encodeURIComponent(location)}&limit=${limit}&appid=${this.apiKey}`\n    );\n\n    if (!response.ok) {\n      throw new Error(`Geocoding API error: ${response.status} ${response.statusText}`);\n    }\n\n    return await response.json();\n  }\n\n  private getDemoWeatherData(location: string, type: 'current' | 'forecast'): string {\n    if (type === 'current') {\n      return `**Current Weather for ${location}** (Demo Data)\\n\\n` +\n             `üå°Ô∏è Temperature: 22¬∞C\\n` +\n             `‚òÅÔ∏è Condition: partly cloudy\\n` +\n             `üíß Humidity: 65%\\n` +\n             `üí® Wind Speed: 3.5 m/s\\n\\n` +\n             `*Note: This is demo data. Set OPENWEATHER_API_KEY environment variable for real weather data.*`;\n    } else {\n      return `**5-Day Weather Forecast for ${location}** (Demo Data)\\n\\n` +\n             `**Monday, Jan 29**\\n  High: 24¬∞C | Low: 18¬∞C\\n  Condition: sunny\\n\\n` +\n             `**Tuesday, Jan 30**\\n  High: 21¬∞C | Low: 16¬∞C\\n  Condition: partly cloudy\\n\\n` +\n             `**Wednesday, Jan 31**\\n  High: 19¬∞C | Low: 14¬∞C\\n  Condition: cloudy\\n\\n` +\n             `**Thursday, Feb 1**\\n  High: 17¬∞C | Low: 12¬∞C\\n  Condition: light rain\\n\\n` +\n             `**Friday, Feb 2**\\n  High: 20¬∞C | Low: 15¬∞C\\n  Condition: partly cloudy\\n\\n` +\n             `*Note: This is demo data. Set OPENWEATHER_API_KEY environment variable for real weather data.*`;\n    }\n  }\n}"],"mappings":";;;;AAEA,yBAA0B;;;ACF1B,yBAA2B;AAwBpB,IAAM,gBAAN,cAA4B,8BAAW;AAAA,EAC5C,WAA2B;AAAA,IACzB,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aAAa;AAAA,EACf;AAAA,EAEQ;AAAA,EACA,UAAU;AAAA,EACV,SAAS;AAAA,EAEjB,YAAY,QAAiB;AAC3B,UAAM;AACN,SAAK,SAAS,UAAU,QAAQ,IAAI,uBAAuB;AAAA,EAC7D;AAAA,EAEA,MAAgB,eAA8B;AAC5C,QAAI,KAAK,WAAW,YAAY;AAC9B,cAAQ,MAAM,8EAA8E;AAAA,IAC9F;AAAA,EACF;AAAA,EAEU,cAAmC;AAC3C,WAAO;AAAA,MACL,KAAK;AAAA,QACH;AAAA,QACA;AAAA,QACA;AAAA,UACE,UAAU;AAAA,YACR,MAAM;AAAA,YACN,aAAa;AAAA,UACf;AAAA,UACA,OAAO;AAAA,YACL,MAAM;AAAA,YACN,MAAM,CAAC,UAAU,YAAY,QAAQ;AAAA,YACrC,aAAa;AAAA,YACb,SAAS;AAAA,UACX;AAAA,QACF;AAAA,QACA,CAAC,UAAU;AAAA,QACX,KAAK,kBAAkB,KAAK,IAAI;AAAA,MAClC;AAAA,MAEA,KAAK;AAAA,QACH;AAAA,QACA;AAAA,QACA;AAAA,UACE,UAAU;AAAA,YACR,MAAM;AAAA,YACN,aAAa;AAAA,UACf;AAAA,UACA,OAAO;AAAA,YACL,MAAM;AAAA,YACN,MAAM,CAAC,UAAU,YAAY,QAAQ;AAAA,YACrC,aAAa;AAAA,YACb,SAAS;AAAA,UACX;AAAA,QACF;AAAA,QACA,CAAC,UAAU;AAAA,QACX,KAAK,mBAAmB,KAAK,IAAI;AAAA,MACnC;AAAA,MAEA,KAAK;AAAA,QACH;AAAA,QACA;AAAA,QACA;AAAA,UACE,OAAO;AAAA,YACL,MAAM;AAAA,YACN,aAAa;AAAA,UACf;AAAA,UACA,OAAO;AAAA,YACL,MAAM;AAAA,YACN,aAAa;AAAA,YACb,SAAS;AAAA,YACT,SAAS;AAAA,YACT,SAAS;AAAA,UACX;AAAA,QACF;AAAA,QACA,CAAC,OAAO;AAAA,QACR,KAAK,gBAAgB,KAAK,IAAI;AAAA,MAChC;AAAA,IACF;AAAA,EACF;AAAA,EAEU,kBAA2C;AACnD,WAAO;AAAA,MACL,KAAK;AAAA,QACH;AAAA,QACA;AAAA,QACA;AAAA,QACA,aAAa,EAAE,UAAU,kBAAkB;AAAA,QAC3C;AAAA,MACF;AAAA,MACA,KAAK;AAAA,QACH;AAAA,QACA;AAAA,QACA;AAAA,QACA,aAAa,EAAE,UAAU,mBAAmB;AAAA,QAC5C;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAc,kBAAkB,QAAa,SAAsC;AACjF,UAAM,EAAE,UAAU,QAAQ,SAAS,IAAI;AAEvC,QAAI,KAAK,WAAW,YAAY;AAC9B,aAAO;AAAA,QACL,SAAS,CAAC;AAAA,UACR,MAAM;AAAA,UACN,MAAM,KAAK,mBAAmB,UAAU,SAAS;AAAA,QACnD,CAAC;AAAA,MACH;AAAA,IACF;AAEA,UAAM,UAAU,MAAM,KAAK,gBAAgB,QAAQ;AACnD,QAAI,CAAC,QAAQ,QAAQ;AACnB,YAAM,IAAI,MAAM,aAAa,QAAQ,aAAa;AAAA,IACpD;AAEA,UAAM,EAAE,KAAK,KAAK,MAAM,QAAQ,IAAI,QAAQ,CAAC;AAC7C,UAAM,WAAW,MAAM;AAAA,MACrB,GAAG,KAAK,OAAO,gBAAgB,GAAG,QAAQ,GAAG,UAAU,KAAK,UAAU,KAAK,MAAM;AAAA,IACnF;AAEA,QAAI,CAAC,SAAS,IAAI;AAChB,YAAM,IAAI,MAAM,sBAAsB,SAAS,MAAM,IAAI,SAAS,UAAU,EAAE;AAAA,IAChF;AAEA,UAAM,OAAO,MAAM,SAAS,KAAK;AACjC,UAAM,UAAuB;AAAA,MAC3B,UAAU,GAAG,IAAI,KAAK,OAAO;AAAA,MAC7B,aAAa,KAAK,MAAM,KAAK,KAAK,IAAI;AAAA,MACtC,WAAW,KAAK,QAAQ,CAAC,EAAE;AAAA,MAC3B,UAAU,KAAK,KAAK;AAAA,MACpB,WAAW,KAAK,KAAK;AAAA,MACrB,UAAU,CAAC;AAAA,IACb;AAEA,UAAM,cAAc,UAAU,aAAa,UAAO,UAAU,WAAW,MAAM;AAC7E,UAAM,WAAW,UAAU,aAAa,QAAQ;AAEhD,WAAO;AAAA,MACL,SAAS,CAAC;AAAA,QACR,MAAM;AAAA,QACN,MAAM,yBAAyB,QAAQ,QAAQ;AAAA;AAAA,+BACrB,QAAQ,WAAW,GAAG,WAAW;AAAA,0BACpC,QAAQ,SAAS;AAAA,sBAClB,QAAQ,QAAQ;AAAA,wBACd,QAAQ,SAAS,IAAI,QAAQ;AAAA,MACvD,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EAEA,MAAc,mBAAmB,QAAa,SAAsC;AAClF,UAAM,EAAE,UAAU,QAAQ,SAAS,IAAI;AAEvC,QAAI,KAAK,WAAW,YAAY;AAC9B,aAAO;AAAA,QACL,SAAS,CAAC;AAAA,UACR,MAAM;AAAA,UACN,MAAM,KAAK,mBAAmB,UAAU,UAAU;AAAA,QACpD,CAAC;AAAA,MACH;AAAA,IACF;AAEA,UAAM,UAAU,MAAM,KAAK,gBAAgB,QAAQ;AACnD,QAAI,CAAC,QAAQ,QAAQ;AACnB,YAAM,IAAI,MAAM,aAAa,QAAQ,aAAa;AAAA,IACpD;AAEA,UAAM,EAAE,KAAK,KAAK,MAAM,QAAQ,IAAI,QAAQ,CAAC;AAC7C,UAAM,WAAW,MAAM;AAAA,MACrB,GAAG,KAAK,OAAO,iBAAiB,GAAG,QAAQ,GAAG,UAAU,KAAK,UAAU,KAAK,MAAM;AAAA,IACpF;AAEA,QAAI,CAAC,SAAS,IAAI;AAChB,YAAM,IAAI,MAAM,sBAAsB,SAAS,MAAM,IAAI,SAAS,UAAU,EAAE;AAAA,IAChF;AAEA,UAAM,OAAO,MAAM,SAAS,KAAK;AACjC,UAAM,cAAc,UAAU,aAAa,UAAO,UAAU,WAAW,MAAM;AAG7E,UAAM,iBAAiB,oBAAI,IAAmB;AAC9C,SAAK,KAAK,QAAQ,CAAC,SAAc;AAC/B,YAAM,OAAO,IAAI,KAAK,KAAK,KAAK,GAAI,EAAE,YAAY,EAAE,MAAM,GAAG,EAAE,CAAC;AAChE,UAAI,CAAC,eAAe,IAAI,IAAI,GAAG;AAC7B,uBAAe,IAAI,MAAM,CAAC,CAAC;AAAA,MAC7B;AACA,qBAAe,IAAI,IAAI,EAAG,KAAK,IAAI;AAAA,IACrC,CAAC;AAED,QAAI,eAAe,gCAAgC,IAAI,KAAK,OAAO;AAAA;AAAA;AAEnE,UAAM,KAAK,eAAe,QAAQ,CAAC,EAAE,MAAM,GAAG,CAAC,EAAE,QAAQ,CAAC,CAAC,MAAM,SAAS,MAAM;AAC9E,YAAM,QAAQ,UAAU,IAAI,OAAK,EAAE,KAAK,IAAI;AAC5C,YAAM,aAAa,UAAU,IAAI,OAAK,EAAE,QAAQ,CAAC,EAAE,WAAW;AAC9D,YAAM,OAAO,KAAK,MAAM,KAAK,IAAI,GAAG,KAAK,CAAC;AAC1C,YAAM,MAAM,KAAK,MAAM,KAAK,IAAI,GAAG,KAAK,CAAC;AACzC,YAAM,YAAY,WAAW,KAAK,MAAM,WAAW,SAAS,CAAC,CAAC;AAE9D,YAAM,UAAU,IAAI,KAAK,IAAI;AAC7B,YAAM,UAAU,QAAQ,mBAAmB,SAAS,EAAE,SAAS,OAAO,CAAC;AACvE,YAAM,WAAW,QAAQ,mBAAmB,SAAS,EAAE,OAAO,SAAS,KAAK,UAAU,CAAC;AAEvF,sBAAgB,KAAK,OAAO,KAAK,QAAQ;AAAA;AACzC,sBAAgB,WAAW,IAAI,GAAG,WAAW,WAAW,GAAG,GAAG,WAAW;AAAA;AACzE,sBAAgB,gBAAgB,SAAS;AAAA;AAAA;AAAA,IAC3C,CAAC;AAED,WAAO;AAAA,MACL,SAAS,CAAC;AAAA,QACR,MAAM;AAAA,QACN,MAAM;AAAA,MACR,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EAEA,MAAc,gBAAgB,QAAa,SAAsC;AAC/E,UAAM,EAAE,OAAO,QAAQ,EAAE,IAAI;AAE7B,QAAI,KAAK,WAAW,YAAY;AAC9B,aAAO;AAAA,QACL,SAAS,CAAC;AAAA,UACR,MAAM;AAAA,UACN,MAAM,uCAAuC,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAOpD,CAAC;AAAA,MACH;AAAA,IACF;AAEA,UAAM,UAAU,MAAM,KAAK,gBAAgB,OAAO,KAAK;AAEvD,QAAI,CAAC,QAAQ,QAAQ;AACnB,aAAO;AAAA,QACL,SAAS,CAAC;AAAA,UACR,MAAM;AAAA,UACN,MAAM,2BAA2B,KAAK;AAAA,QACxC,CAAC;AAAA,MACH;AAAA,IACF;AAEA,QAAI,cAAc,kCAAkC,KAAK;AAAA;AAAA;AACzD,YAAQ,QAAQ,CAAC,aAA0B;AACzC,qBAAe,aAAM,SAAS,IAAI,KAAK,SAAS,OAAO,KAAK,SAAS,IAAI,QAAQ,CAAC,CAAC,KAAK,SAAS,IAAI,QAAQ,CAAC,CAAC;AAAA;AAAA,IACjH,CAAC;AAED,WAAO;AAAA,MACL,SAAS,CAAC;AAAA,QACR,MAAM;AAAA,QACN,MAAM;AAAA,MACR,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EAEA,MAAc,gBAAgB,UAAkB,QAAgB,GAA2B;AACzF,UAAM,WAAW,MAAM;AAAA,MACrB,GAAG,KAAK,MAAM,aAAa,mBAAmB,QAAQ,CAAC,UAAU,KAAK,UAAU,KAAK,MAAM;AAAA,IAC7F;AAEA,QAAI,CAAC,SAAS,IAAI;AAChB,YAAM,IAAI,MAAM,wBAAwB,SAAS,MAAM,IAAI,SAAS,UAAU,EAAE;AAAA,IAClF;AAEA,WAAO,MAAM,SAAS,KAAK;AAAA,EAC7B;AAAA,EAEQ,mBAAmB,UAAkB,MAAsC;AACjF,QAAI,SAAS,WAAW;AACtB,aAAO,yBAAyB,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAM1C,OAAO;AACL,aAAO,gCAAgC,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOjD;AAAA,EACF;AACF;;;ADvTA,eAAe,OAAO;AAEpB,QAAM,SAAS,QAAQ,IAAI,uBAAuB,QAAQ,KAAK,CAAC;AAEhE,MAAI,CAAC,QAAQ;AACX,YAAQ,MAAM,oEAA0D;AACxE,YAAQ,MAAM,2BAA2B;AACzC,YAAQ,MAAM,2DAA2D;AACzE,YAAQ,MAAM,iDAAiD;AAC/D,YAAQ,MAAM,mDAAmD;AACjE,YAAQ,MAAM,EAAE;AAChB,YAAQ,MAAM,0BAA0B;AACxC,YAAQ,MAAM,EAAE;AAAA,EAClB;AAGA,QAAM,SAAS,IAAI,6BAAU;AAAA,IAC3B,MAAM;AAAA,IACN,SAAS;AAAA,IACT,WAAW,EAAE,MAAM,QAAQ;AAAA,EAC7B,CAAC;AAGD,QAAM,gBAAgB,IAAI,cAAc,MAAM;AAC9C,QAAM,OAAO,eAAe,aAAa;AAGzC,MAAI;AACF,UAAM,OAAO,MAAM;AACnB,YAAQ,MAAM,2DAA+C;AAC7D,YAAQ,MAAM,kBAAkB;AAChC,YAAQ,MAAM,6DAA6D;AAC3E,YAAQ,MAAM,6DAA6D;AAC3E,YAAQ,MAAM,oDAAoD;AAClE,YAAQ,MAAM,EAAE;AAEhB,QAAI,CAAC,UAAU,WAAW,YAAY;AACpC,cAAQ,MAAM,wEAAiE;AAAA,IACjF,OAAO;AACL,cAAQ,MAAM,8DAAuD;AAAA,IACvE;AACA,YAAQ,MAAM,EAAE;AAAA,EAClB,SAAS,OAAO;AACd,YAAQ,MAAM,0CAAqC,KAAK;AACxD,YAAQ,KAAK,CAAC;AAAA,EAChB;AACF;AAGA,QAAQ,GAAG,UAAU,MAAM;AACzB,UAAQ,MAAM,6CAAsC;AACpD,UAAQ,KAAK,CAAC;AAChB,CAAC;AAED,QAAQ,GAAG,WAAW,MAAM;AAC1B,UAAQ,MAAM,6CAAsC;AACpD,UAAQ,KAAK,CAAC;AAChB,CAAC;AAGD,KAAK,EAAE,MAAM,CAAC,UAAU;AACtB,UAAQ,MAAM,gCAA2B,KAAK;AAC9C,UAAQ,KAAK,CAAC;AAChB,CAAC;","names":[]}