{"version":3,"sources":["../src/mcp.ts"],"sourcesContent":["/**\n * Core MCP (Model Context Protocol) type definitions\n */\n\nexport interface MCPToolDefinition {\n  name: string;\n  description: string;\n  inputSchema: {\n    type: 'object';\n    properties: Record<string, any>;\n    required?: string[];\n    additionalProperties?: boolean;\n  };\n  handler: (parameters: any, context: PluginContext) => Promise<any>;\n}\n\nexport interface MCPResourceDefinition {\n  uri: string;\n  name: string;\n  description?: string;\n  mimeType?: string;\n  handler: (context: PluginContext) => Promise<any>;\n}\n\nexport interface MCPPromptDefinition {\n  name: string;\n  description: string;\n  arguments?: {\n    name: string;\n    description: string;\n    required?: boolean;\n  }[];\n  handler: (args: Record<string, any>, context: PluginContext) => Promise<{\n    messages: MCPMessage[];\n  }>;\n}\n\nexport interface MCPMessage {\n  role: 'user' | 'assistant' | 'system';\n  content: {\n    type: 'text' | 'image';\n    text?: string;\n    image_url?: string;\n  };\n}\n\nexport interface MCPRequest {\n  jsonrpc: '2.0';\n  id: string | number;\n  method: string;\n  params?: any;\n}\n\nexport interface MCPResponse {\n  jsonrpc: '2.0';\n  id: string | number;\n  result?: any;\n  error?: MCPError;\n}\n\nexport interface MCPError {\n  code: number;\n  message: string;\n  data?: any;\n}\n\nexport enum MCPErrorCode {\n  ParseError = -32700,\n  InvalidRequest = -32600,\n  MethodNotFound = -32601,\n  InvalidParams = -32602,\n  InternalError = -32603,\n}\n\nexport interface UserRequestContext {\n  sessionId: string;\n  userId: string;\n  currentWorkflow?: string;\n  message: string;\n  timestamp: Date;\n  metadata?: Record<string, any>;\n}\n\nexport interface PluginContext {\n  registerTool(tool: MCPToolDefinition): void;\n  registerResource(resource: MCPResourceDefinition): void;\n  registerPrompt(prompt: MCPPromptDefinition): void;\n  logger: Logger;\n  getRequestContext(): UserRequestContext | null;\n  getWorkflowState<T = any>(): T | undefined;\n  updateWorkflowState<T = any>(state: T): Promise<void>;\n  config: Record<string, any>;\n}\n\nexport interface Logger {\n  debug(message: string, ...args: any[]): void;\n  info(message: string, ...args: any[]): void;\n  warn(message: string, ...args: any[]): void;\n  error(message: string, ...args: any[]): void;\n}"],"mappings":";AAkEO,IAAK,eAAL,kBAAKA,kBAAL;AACL,EAAAA,4BAAA,gBAAa,UAAb;AACA,EAAAA,4BAAA,oBAAiB,UAAjB;AACA,EAAAA,4BAAA,oBAAiB,UAAjB;AACA,EAAAA,4BAAA,mBAAgB,UAAhB;AACA,EAAAA,4BAAA,mBAAgB,UAAhB;AALU,SAAAA;AAAA,GAAA;","names":["MCPErrorCode"]}