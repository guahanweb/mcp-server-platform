{"version":3,"sources":["../src/index.ts","../src/base-plugin.ts","../src/workflow-plugin.ts","../src/tool-helpers.ts","../src/context-helpers.ts","../src/validation.ts"],"sourcesContent":["export * from './base-plugin';\nexport * from './workflow-plugin';\nexport * from './tool-helpers';\nexport * from './context-helpers';\nexport * from './validation';","import { \n  MCPPlugin, \n  PluginMetadata, \n  PluginContext,\n  MCPToolDefinition,\n  MCPResourceDefinition,\n  MCPPromptDefinition\n} from '@mcp/types';\n\nexport abstract class BasePlugin implements MCPPlugin {\n  abstract metadata: PluginMetadata;\n\n  async initialize(this: PluginContext): Promise<void> {\n    // Cast to get access to the concrete plugin instance\n    const pluginInstance = (this as any).__plugin_instance__;\n    \n    // Register all tools defined by the plugin\n    const tools = pluginInstance.defineTools();\n    for (const tool of tools) {\n      this.registerTool(tool);\n    }\n\n    // Register any resources\n    const resources = pluginInstance.defineResources();\n    for (const resource of resources) {\n      this.registerResource(resource);\n    }\n\n    // Register any prompts\n    const prompts = pluginInstance.definePrompts();\n    for (const prompt of prompts) {\n      this.registerPrompt(prompt);\n    }\n\n    // Perform any additional initialization\n    await pluginInstance.onInitialize();\n  }\n\n  // Override these methods in subclasses\n  protected abstract defineTools(): MCPToolDefinition[];\n  \n  protected defineResources(): MCPResourceDefinition[] {\n    return [];\n  }\n\n  protected definePrompts(): MCPPromptDefinition[] {\n    return [];\n  }\n\n  protected async onInitialize(): Promise<void> {\n    // Override in subclasses if needed\n  }\n\n  async shutdown(): Promise<void> {\n    // Override in subclasses if cleanup needed\n  }\n\n  // Helper method for consistent tool naming\n  protected toolName(name: string): string {\n    return `${this.metadata.id}:${name}`;\n  }\n\n  // Helper for creating tool definitions with consistent structure\n  protected createTool(\n    name: string,\n    description: string,\n    properties: Record<string, any>,\n    required: string[],\n    handler: (params: any, context: PluginContext) => Promise<any>\n  ): MCPToolDefinition {\n    return {\n      name: name,  // Just the tool name, framework will add prefix\n      description,\n      inputSchema: {\n        type: 'object',\n        properties,\n        required,\n      },\n      handler,\n    };\n  }\n\n  // Helper for creating resource definitions\n  protected createResource(\n    uri: string,\n    name: string,\n    description: string,\n    handler: (context: PluginContext) => Promise<any>,\n    mimeType?: string\n  ): MCPResourceDefinition {\n    return {\n      uri,\n      name,\n      description,\n      mimeType,\n      handler,\n    };\n  }\n\n  // Helper for creating prompt definitions\n  protected createPrompt(\n    name: string,\n    description: string,\n    handler: (args: Record<string, any>, context: PluginContext) => Promise<{ messages: any[] }>,\n    args?: { name: string; description: string; required?: boolean }[]\n  ): MCPPromptDefinition {\n    return {\n      name: this.toolName(name),\n      description,\n      arguments: args,\n      handler,\n    };\n  }\n}","import { WorkflowPluginMetadata, PluginContext } from '@mcp/types';\nimport { BasePlugin } from './base-plugin';\n\nexport abstract class WorkflowPlugin extends BasePlugin {\n  abstract metadata: WorkflowPluginMetadata;\n\n  // Workflow-specific methods\n  abstract getSystemPrompt(context?: any): string;\n  abstract onWorkflowEnter?(context: any): Promise<void>;\n  abstract onWorkflowExit?(context: any): Promise<void>;\n  \n  // State management helpers\n  protected async getWorkflowState<T = any>(context: PluginContext): Promise<T | undefined> {\n    return context.getWorkflowState<T>();\n  }\n\n  protected async updateWorkflowState<T = any>(context: PluginContext, state: T): Promise<void> {\n    await context.updateWorkflowState(state);\n  }\n\n  protected async initializeWorkflowState<T = any>(context: PluginContext, initialState: T): Promise<T> {\n    const existingState = await this.getWorkflowState<T>(context);\n    if (!existingState) {\n      await this.updateWorkflowState(context, initialState);\n      return initialState;\n    }\n    return existingState;\n  }\n\n  // Progress tracking helpers\n  protected async updateProgress(context: PluginContext, step: string, percentage: number): Promise<void> {\n    const state = await this.getWorkflowState(context) || {};\n    const updatedState = {\n      ...state,\n      currentStep: step,\n      progress: percentage,\n      lastUpdated: new Date().toISOString()\n    };\n    await this.updateWorkflowState(context, updatedState);\n  }\n\n  protected async addCheckpoint(context: PluginContext, description: string, data?: any): Promise<void> {\n    const state = await this.getWorkflowState(context) || {};\n    const checkpoint = {\n      id: `checkpoint_${Date.now()}`,\n      timestamp: new Date().toISOString(),\n      description,\n      data: data || {}\n    };\n    \n    const checkpoints = state.checkpoints || [];\n    checkpoints.push(checkpoint);\n    \n    const updatedState = {\n      ...state,\n      checkpoints,\n      lastCheckpoint: checkpoint\n    };\n    \n    await this.updateWorkflowState(context, updatedState);\n  }\n\n  // Context validation helpers\n  protected validateRequiredContext(context: any, required: string[]): void {\n    for (const key of required) {\n      if (!(key in context)) {\n        throw new Error(`Required context missing: ${key}`);\n      }\n    }\n  }\n\n  // Intent detection helpers\n  protected matchesTrigger(message: string, triggers: string[]): boolean {\n    const lowerMessage = message.toLowerCase();\n    return triggers.some(trigger => \n      lowerMessage.includes(trigger.toLowerCase())\n    );\n  }\n\n  protected matchesExitSignal(message: string, exitSignals: string[]): boolean {\n    const lowerMessage = message.toLowerCase();\n    return exitSignals.some(signal => \n      lowerMessage.includes(signal.toLowerCase())\n    );\n  }\n\n  // Tool creation with workflow context\n  protected createWorkflowTool(\n    name: string,\n    description: string,\n    properties: Record<string, any>,\n    required: string[],\n    handler: (params: any, context: PluginContext) => Promise<any>\n  ) {\n    return this.createTool(name, description, properties, required, async (params, context) => {\n      // Ensure workflow state exists\n      await this.initializeWorkflowState(context, {\n        workflowId: this.metadata.id,\n        startedAt: new Date().toISOString(),\n        currentStep: name,\n        data: {}\n      });\n\n      return await handler(params, context);\n    });\n  }\n}","import { MCPToolDefinition, PluginContext } from '@mcp/types';\n\n/**\n * Common tool parameter schemas\n */\nexport const CommonSchemas = {\n  string: (description: string, required = true) => ({\n    type: 'string',\n    description,\n    ...(required ? {} : { required: false })\n  }),\n\n  number: (description: string, min?: number, max?: number) => ({\n    type: 'number',\n    description,\n    ...(min !== undefined ? { minimum: min } : {}),\n    ...(max !== undefined ? { maximum: max } : {})\n  }),\n\n  boolean: (description: string) => ({\n    type: 'boolean',\n    description\n  }),\n\n  array: (description: string, itemType: any) => ({\n    type: 'array',\n    description,\n    items: itemType\n  }),\n\n  enum: (description: string, values: string[]) => ({\n    type: 'string',\n    description,\n    enum: values\n  }),\n\n  object: (description: string, properties: Record<string, any>) => ({\n    type: 'object',\n    description,\n    properties,\n    additionalProperties: false\n  })\n};\n\n/**\n * Tool builder with fluent API\n */\nexport class ToolBuilder {\n  private name: string;\n  private description: string;\n  private properties: Record<string, any> = {};\n  private required: string[] = [];\n  private handler?: (params: any, context: PluginContext) => Promise<any>;\n\n  constructor(name: string, description: string) {\n    this.name = name;\n    this.description = description;\n  }\n\n  addParameter(name: string, schema: any, isRequired = false): ToolBuilder {\n    this.properties[name] = schema;\n    if (isRequired) {\n      this.required.push(name);\n    }\n    return this;\n  }\n\n  addStringParameter(name: string, description: string, isRequired = false): ToolBuilder {\n    return this.addParameter(name, CommonSchemas.string(description), isRequired);\n  }\n\n  addNumberParameter(name: string, description: string, min?: number, max?: number, isRequired = false): ToolBuilder {\n    return this.addParameter(name, CommonSchemas.number(description, min, max), isRequired);\n  }\n\n  addBooleanParameter(name: string, description: string, isRequired = false): ToolBuilder {\n    return this.addParameter(name, CommonSchemas.boolean(description), isRequired);\n  }\n\n  addEnumParameter(name: string, description: string, values: string[], isRequired = false): ToolBuilder {\n    return this.addParameter(name, CommonSchemas.enum(description, values), isRequired);\n  }\n\n  addArrayParameter(name: string, description: string, itemType: any, isRequired = false): ToolBuilder {\n    return this.addParameter(name, CommonSchemas.array(description, itemType), isRequired);\n  }\n\n  addObjectParameter(name: string, description: string, properties: Record<string, any>, isRequired = false): ToolBuilder {\n    return this.addParameter(name, CommonSchemas.object(description, properties), isRequired);\n  }\n\n  setHandler(handler: (params: any, context: PluginContext) => Promise<any>): ToolBuilder {\n    this.handler = handler;\n    return this;\n  }\n\n  build(): MCPToolDefinition {\n    if (!this.handler) {\n      throw new Error(`Tool ${this.name} is missing a handler`);\n    }\n\n    return {\n      name: this.name,\n      description: this.description,\n      inputSchema: {\n        type: 'object',\n        properties: this.properties,\n        required: this.required,\n        additionalProperties: false\n      },\n      handler: this.handler\n    };\n  }\n}\n\n/**\n * Create a tool with the builder pattern\n */\nexport function createTool(name: string, description: string): ToolBuilder {\n  return new ToolBuilder(name, description);\n}\n\n/**\n * Common tool patterns\n */\nexport const ToolPatterns = {\n  // Simple string input/output tool\n  simpleStringTool: (\n    name: string,\n    description: string,\n    inputParamName: string,\n    inputDescription: string,\n    handler: (input: string, context: PluginContext) => Promise<string>\n  ): MCPToolDefinition => {\n    return createTool(name, description)\n      .addStringParameter(inputParamName, inputDescription, true)\n      .setHandler(async (params, context) => {\n        return await handler(params[inputParamName], context);\n      })\n      .build();\n  },\n\n  // Configuration tool\n  configTool: (\n    name: string,\n    description: string,\n    configSchema: Record<string, any>,\n    handler: (config: any, context: PluginContext) => Promise<any>\n  ): MCPToolDefinition => {\n    return createTool(name, description)\n      .addObjectParameter('config', 'Configuration object', configSchema, true)\n      .setHandler(async (params, context) => {\n        return await handler(params.config, context);\n      })\n      .build();\n  },\n\n  // CRUD operations\n  createTool: (\n    entityName: string,\n    properties: Record<string, any>,\n    handler: (data: any, context: PluginContext) => Promise<any>\n  ): MCPToolDefinition => {\n    return createTool(`create_${entityName}`, `Create a new ${entityName}`)\n      .addObjectParameter('data', `${entityName} data`, properties, true)\n      .setHandler(async (params, context) => {\n        return await handler(params.data, context);\n      })\n      .build();\n  },\n\n  readTool: (\n    entityName: string,\n    handler: (id: string, context: PluginContext) => Promise<any>\n  ): MCPToolDefinition => {\n    return createTool(`read_${entityName}`, `Read a ${entityName} by ID`)\n      .addStringParameter('id', `${entityName} ID`, true)\n      .setHandler(async (params, context) => {\n        return await handler(params.id, context);\n      })\n      .build();\n  },\n\n  updateTool: (\n    entityName: string,\n    properties: Record<string, any>,\n    handler: (id: string, data: any, context: PluginContext) => Promise<any>\n  ): MCPToolDefinition => {\n    return createTool(`update_${entityName}`, `Update a ${entityName}`)\n      .addStringParameter('id', `${entityName} ID`, true)\n      .addObjectParameter('data', `Updated ${entityName} data`, properties, true)\n      .setHandler(async (params, context) => {\n        return await handler(params.id, params.data, context);\n      })\n      .build();\n  },\n\n  deleteTool: (\n    entityName: string,\n    handler: (id: string, context: PluginContext) => Promise<any>\n  ): MCPToolDefinition => {\n    return createTool(`delete_${entityName}`, `Delete a ${entityName}`)\n      .addStringParameter('id', `${entityName} ID`, true)\n      .setHandler(async (params, context) => {\n        return await handler(params.id, context);\n      })\n      .build();\n  }\n};","import { PluginContext, UserRequestContext } from '@mcp/types';\n\n/**\n * Helper functions for working with plugin context\n */\n\nexport class ContextHelper {\n  constructor(private context: PluginContext) {}\n\n  // Request context helpers\n  getSessionId(): string | undefined {\n    return this.context.getRequestContext()?.sessionId;\n  }\n\n  getUserId(): string | undefined {\n    return this.context.getRequestContext()?.userId;\n  }\n\n  getCurrentWorkflow(): string | undefined {\n    return this.context.getRequestContext()?.currentWorkflow;\n  }\n\n  getMessage(): string | undefined {\n    return this.context.getRequestContext()?.message;\n  }\n\n  getMetadata(): Record<string, any> | undefined {\n    return this.context.getRequestContext()?.metadata;\n  }\n\n  // State management helpers\n  async getState<T = any>(): Promise<T | undefined> {\n    return this.context.getWorkflowState<T>();\n  }\n\n  async updateState<T = any>(state: T): Promise<void> {\n    await this.context.updateWorkflowState(state);\n  }\n\n  async mergeState(updates: Record<string, any>): Promise<void> {\n    const currentState = await this.getState() || {};\n    const newState = { ...currentState, ...updates };\n    await this.updateState(newState);\n  }\n\n  async getStateProperty<T = any>(key: string): Promise<T | undefined> {\n    const state = await this.getState();\n    return state ? state[key] : undefined;\n  }\n\n  async setStateProperty<T = any>(key: string, value: T): Promise<void> {\n    await this.mergeState({ [key]: value });\n  }\n\n  // Configuration helpers\n  getConfig(): Record<string, any> {\n    return this.context.config;\n  }\n\n  getConfigValue<T = any>(key: string, defaultValue?: T): T {\n    return this.context.config[key] ?? defaultValue;\n  }\n\n  // Logging helpers\n  debug(message: string, ...args: any[]): void {\n    this.context.logger.debug(message, ...args);\n  }\n\n  info(message: string, ...args: any[]): void {\n    this.context.logger.info(message, ...args);\n  }\n\n  warn(message: string, ...args: any[]): void {\n    this.context.logger.warn(message, ...args);\n  }\n\n  error(message: string, ...args: any[]): void {\n    this.context.logger.error(message, ...args);\n  }\n\n  // Validation helpers\n  requireSessionId(): string {\n    const sessionId = this.getSessionId();\n    if (!sessionId) {\n      throw new Error('Session ID is required but not provided');\n    }\n    return sessionId;\n  }\n\n  requireUserId(): string {\n    const userId = this.getUserId();\n    if (!userId) {\n      throw new Error('User ID is required but not provided');\n    }\n    return userId;\n  }\n\n  requireWorkflow(): string {\n    const workflow = this.getCurrentWorkflow();\n    if (!workflow) {\n      throw new Error('Current workflow is required but not set');\n    }\n    return workflow;\n  }\n\n  requireState<T = any>(): T {\n    const state = this.context.getWorkflowState<T>();\n    if (!state) {\n      throw new Error('Workflow state is required but not available');\n    }\n    return state;\n  }\n}\n\n/**\n * Create a context helper instance\n */\nexport function createContextHelper(context: PluginContext): ContextHelper {\n  return new ContextHelper(context);\n}\n\n/**\n * State management utilities\n */\nexport const StateUtils = {\n  // Initialize state if it doesn't exist\n  async initializeState<T>(context: PluginContext, initialState: T): Promise<T> {\n    const existingState = context.getWorkflowState<T>();\n    if (!existingState) {\n      await context.updateWorkflowState(initialState);\n      return initialState;\n    }\n    return existingState;\n  },\n\n  // Update nested property in state\n  async updateNestedProperty(\n    context: PluginContext,\n    path: string,\n    value: any\n  ): Promise<void> {\n    const state = context.getWorkflowState() || {};\n    const keys = path.split('.');\n    let current = state;\n\n    // Navigate to the parent of the target property\n    for (let i = 0; i < keys.length - 1; i++) {\n      const key = keys[i];\n      if (!(key in current)) {\n        current[key] = {};\n      }\n      current = current[key];\n    }\n\n    // Set the target property\n    current[keys[keys.length - 1]] = value;\n    await context.updateWorkflowState(state);\n  },\n\n  // Get nested property from state\n  getNestedProperty<T = any>(state: any, path: string, defaultValue?: T): T {\n    const keys = path.split('.');\n    let current = state;\n\n    for (const key of keys) {\n      if (current && typeof current === 'object' && key in current) {\n        current = current[key];\n      } else {\n        return defaultValue as T;\n      }\n    }\n\n    return current as T;\n  },\n\n  // Add item to array in state\n  async addToArray(\n    context: PluginContext,\n    arrayPath: string,\n    item: any\n  ): Promise<void> {\n    const state = context.getWorkflowState() || {};\n    const currentArray = StateUtils.getNestedProperty(state, arrayPath, []);\n    const newArray = [...currentArray, item];\n    await StateUtils.updateNestedProperty(context, arrayPath, newArray);\n  },\n\n  // Remove item from array in state\n  async removeFromArray(\n    context: PluginContext,\n    arrayPath: string,\n    predicate: (item: any) => boolean\n  ): Promise<void> {\n    const state = context.getWorkflowState() || {};\n    const currentArray = StateUtils.getNestedProperty(state, arrayPath, []);\n    const newArray = currentArray.filter((item: any) => !predicate(item));\n    await StateUtils.updateNestedProperty(context, arrayPath, newArray);\n  }\n};\n\n/**\n * Request context utilities\n */\nexport const RequestUtils = {\n  // Extract information from user message\n  extractEmail(message: string): string | null {\n    const emailRegex = /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/;\n    const match = message.match(emailRegex);\n    return match ? match[0] : null;\n  },\n\n  extractUrl(message: string): string | null {\n    const urlRegex = /https?:\\/\\/[^\\s]+/;\n    const match = message.match(urlRegex);\n    return match ? match[0] : null;\n  },\n\n  extractNumber(message: string): number | null {\n    const numberRegex = /\\b\\d+(?:\\.\\d+)?\\b/;\n    const match = message.match(numberRegex);\n    return match ? parseFloat(match[0]) : null;\n  },\n\n  // Check if message contains specific patterns\n  containsQuestion(message: string): boolean {\n    return message.includes('?') || \n           message.toLowerCase().startsWith('what') ||\n           message.toLowerCase().startsWith('how') ||\n           message.toLowerCase().startsWith('why') ||\n           message.toLowerCase().startsWith('when') ||\n           message.toLowerCase().startsWith('where') ||\n           message.toLowerCase().startsWith('who');\n  },\n\n  containsNegation(message: string): boolean {\n    const negationWords = ['no', 'not', 'never', 'none', 'nothing', 'nobody', 'nowhere'];\n    const lowerMessage = message.toLowerCase();\n    return negationWords.some(word => lowerMessage.includes(word));\n  },\n\n  containsUrgency(message: string): boolean {\n    const urgencyWords = ['urgent', 'asap', 'immediately', 'quickly', 'rush', 'emergency'];\n    const lowerMessage = message.toLowerCase();\n    return urgencyWords.some(word => lowerMessage.includes(word));\n  }\n};","/**\n * Validation utilities for MCP plugins\n */\n\nexport class ValidationError extends Error {\n  constructor(message: string, public field?: string, public value?: any) {\n    super(message);\n    this.name = 'ValidationError';\n  }\n}\n\nexport type ValidationRule<T = any> = (value: T, field: string) => string | null;\n\n/**\n * Common validation rules\n */\nexport const ValidationRules = {\n  required: <T>(value: T, field: string): string | null => {\n    if (value === null || value === undefined || value === '') {\n      return `${field} is required`;\n    }\n    return null;\n  },\n\n  string: (value: any, field: string): string | null => {\n    if (typeof value !== 'string') {\n      return `${field} must be a string`;\n    }\n    return null;\n  },\n\n  number: (value: any, field: string): string | null => {\n    if (typeof value !== 'number' || isNaN(value)) {\n      return `${field} must be a valid number`;\n    }\n    return null;\n  },\n\n  boolean: (value: any, field: string): string | null => {\n    if (typeof value !== 'boolean') {\n      return `${field} must be a boolean`;\n    }\n    return null;\n  },\n\n  array: (value: any, field: string): string | null => {\n    if (!Array.isArray(value)) {\n      return `${field} must be an array`;\n    }\n    return null;\n  },\n\n  object: (value: any, field: string): string | null => {\n    if (typeof value !== 'object' || value === null || Array.isArray(value)) {\n      return `${field} must be an object`;\n    }\n    return null;\n  },\n\n  minLength: (min: number): ValidationRule<string> => {\n    return (value: string, field: string): string | null => {\n      if (typeof value === 'string' && value.length < min) {\n        return `${field} must be at least ${min} characters long`;\n      }\n      return null;\n    };\n  },\n\n  maxLength: (max: number): ValidationRule<string> => {\n    return (value: string, field: string): string | null => {\n      if (typeof value === 'string' && value.length > max) {\n        return `${field} must be no more than ${max} characters long`;\n      }\n      return null;\n    };\n  },\n\n  min: (min: number): ValidationRule<number> => {\n    return (value: number, field: string): string | null => {\n      if (typeof value === 'number' && value < min) {\n        return `${field} must be at least ${min}`;\n      }\n      return null;\n    };\n  },\n\n  max: (max: number): ValidationRule<number> => {\n    return (value: number, field: string): string | null => {\n      if (typeof value === 'number' && value > max) {\n        return `${field} must be no more than ${max}`;\n      }\n      return null;\n    };\n  },\n\n  email: (value: string, field: string): string | null => {\n    if (typeof value === 'string') {\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(value)) {\n        return `${field} must be a valid email address`;\n      }\n    }\n    return null;\n  },\n\n  url: (value: string, field: string): string | null => {\n    if (typeof value === 'string') {\n      try {\n        new URL(value);\n      } catch {\n        return `${field} must be a valid URL`;\n      }\n    }\n    return null;\n  },\n\n  oneOf: <T>(options: T[]): ValidationRule<T> => {\n    return (value: T, field: string): string | null => {\n      if (!options.includes(value)) {\n        return `${field} must be one of: ${options.join(', ')}`;\n      }\n      return null;\n    };\n  },\n\n  pattern: (regex: RegExp, message?: string): ValidationRule<string> => {\n    return (value: string, field: string): string | null => {\n      if (typeof value === 'string' && !regex.test(value)) {\n        return message || `${field} does not match the required pattern`;\n      }\n      return null;\n    };\n  }\n};\n\n/**\n * Validator class for validating objects\n */\nexport class Validator {\n  private rules: Map<string, ValidationRule[]> = new Map();\n\n  addRule(field: string, ...rules: ValidationRule[]): Validator {\n    const existingRules = this.rules.get(field) || [];\n    this.rules.set(field, [...existingRules, ...rules]);\n    return this;\n  }\n\n  validate(data: Record<string, any>): ValidationError[] {\n    const errors: ValidationError[] = [];\n\n    for (const [field, rules] of this.rules) {\n      const value = data[field];\n      \n      for (const rule of rules) {\n        const error = rule(value, field);\n        if (error) {\n          errors.push(new ValidationError(error, field, value));\n          break; // Stop at first error for this field\n        }\n      }\n    }\n\n    return errors;\n  }\n\n  validateAndThrow(data: Record<string, any>): void {\n    const errors = this.validate(data);\n    if (errors.length > 0) {\n      const message = errors.map(e => e.message).join(', ');\n      throw new ValidationError(`Validation failed: ${message}`);\n    }\n  }\n\n  isValid(data: Record<string, any>): boolean {\n    return this.validate(data).length === 0;\n  }\n}\n\n/**\n * Helper function to create a validator\n */\nexport function createValidator(): Validator {\n  return new Validator();\n}\n\n/**\n * Common validation schemas\n */\nexport const CommonValidators = {\n  email: createValidator()\n    .addRule('email', ValidationRules.required, ValidationRules.string, ValidationRules.email),\n\n  url: createValidator()\n    .addRule('url', ValidationRules.required, ValidationRules.string, ValidationRules.url),\n\n  positiveNumber: createValidator()\n    .addRule('value', ValidationRules.required, ValidationRules.number, ValidationRules.min(0)),\n\n  nonEmptyString: createValidator()\n    .addRule('value', ValidationRules.required, ValidationRules.string, ValidationRules.minLength(1)),\n\n  id: createValidator()\n    .addRule('id', ValidationRules.required, ValidationRules.string, ValidationRules.minLength(1)),\n\n  name: createValidator()\n    .addRule('name', ValidationRules.required, ValidationRules.string, ValidationRules.minLength(1), ValidationRules.maxLength(100)),\n\n  description: createValidator()\n    .addRule('description', ValidationRules.string, ValidationRules.maxLength(1000))\n};\n\n/**\n * Validation decorators\n */\nexport function validate(validator: Validator) {\n  return function (target: any, propertyName: string, descriptor: PropertyDescriptor) {\n    const method = descriptor.value;\n    \n    descriptor.value = function (...args: any[]) {\n      const params = args[0];\n      if (params && typeof params === 'object') {\n        validator.validateAndThrow(params);\n      }\n      return method.apply(this, args);\n    };\n    \n    return descriptor;\n  };\n}\n\n/**\n * Parameter validation helpers\n */\nexport const ParamValidation = {\n  requireString: (value: any, name: string): string => {\n    if (typeof value !== 'string') {\n      throw new ValidationError(`${name} must be a string`, name, value);\n    }\n    return value;\n  },\n\n  requireNumber: (value: any, name: string): number => {\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new ValidationError(`${name} must be a valid number`, name, value);\n    }\n    return value;\n  },\n\n  requireBoolean: (value: any, name: string): boolean => {\n    if (typeof value !== 'boolean') {\n      throw new ValidationError(`${name} must be a boolean`, name, value);\n    }\n    return value;\n  },\n\n  requireArray: (value: any, name: string): any[] => {\n    if (!Array.isArray(value)) {\n      throw new ValidationError(`${name} must be an array`, name, value);\n    }\n    return value;\n  },\n\n  requireObject: (value: any, name: string): Record<string, any> => {\n    if (typeof value !== 'object' || value === null || Array.isArray(value)) {\n      throw new ValidationError(`${name} must be an object`, name, value);\n    }\n    return value;\n  },\n\n  optional: <T>(value: any, validator: (val: any, name: string) => T, name: string): T | undefined => {\n    if (value === undefined || value === null) {\n      return undefined;\n    }\n    return validator(value, name);\n  }\n};"],"mappings":"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","names":[]}